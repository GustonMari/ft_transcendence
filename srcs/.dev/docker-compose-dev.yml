version: '3.8'

services:

  postgres:
    container_name: postgres
    image: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: ${POSTGRES_DATA}
    volumes:
       - postgres_volume:${POSTGRES_DATA}
    ports:
      - "5432:5432"
    networks:
      - db
    restart: unless-stopped

  adminer:
    container_name: adminer
    image: adminer:latest
    restart: always
    ports:
      - 8077:8080
    networks:
      - db

  api:
    container_name: api
    hostname: api
    build:
      context: ./../requirements/back-end
      dockerfile: Dockerfile
      target: development
    ports:
      - ${API_PORT}:${API_PORT}
      - ${PRISMA_PORT}:${PRISMA_PORT}
      - 3001:3001
    restart: unless-stopped
    networks:
      - db
      - back
    volumes:
      - ./../requirements/back-end:/usr/back-end
    depends_on:
      - postgres
    environment:
      - MODE=development
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - CLIENT_ID=${CLIENT_ID}
      - CLIENT_SECRET=${CLIENT_SECRET}
    command: ["npm", "run", "start:development"]

  front:
    container_name: front
    hostname: front
    build:
      context: ./../requirements/front-end
      dockerfile: Dockerfile
      target: development
    ports:
      - ${FRONT_PORT}:${FRONT_PORT}
    environment:
      - API_PORT=${API_PORT}
      - PORT=${FRONT_PORT}
      - MODE=development
      - CLIENT_ID=${CLIENT_ID}
    restart: unless-stopped
    networks:
      - back
    volumes:
      - ./../requirements/front-end:/usr/front-end
    depends_on:
      - api
      - postgres      
    command: sh -c "yarn install; yarn run start"

networks:
  back:
    driver: bridge
  db:
    driver: bridge

volumes: 
  postgres_volume:
