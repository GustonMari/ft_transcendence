version: '3.8'

services:

  portainer:
    image: portainer/portainer:latest
    ports:
      - "9000:9000"
    command: --admin-password '$$2y$$05$$1jd2RxkNxgZqNAvPcFKz0umjdmishN.FB..dwBRDbUvmAzgCfNwP6' # superpassword
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer-data:/data

  postgres:
    container_name: postgres
    # hostname: postgres
    image: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: ${POSTGRES_DATA}
    volumes:
       - postgres_volume:${POSTGRES_DATA}
    ports:
      - "5432:5432"
    networks:
      - db
    restart: unless-stopped

  api:
    container_name: api
    hostname: api
    build:
      context: ./../requirements/back-end
      dockerfile: Dockerfile
      target: development
    ports:
      - ${API_PORT}:${API_PORT}
      - ${PRISMA_PORT}:${PRISMA_PORT}
    restart: unless-stopped
    networks:
      - db
      - back
    volumes:
      - ./../requirements/back-end/app:/usr/back-end/app
    depends_on:
      - postgres
    command: ["npm", "run", "start:development"]

  front:
    container_name: front
    hostname: front
    build:
      context: ./../requirements/front-end
      dockerfile: Dockerfile
      target: development
    ports:
      - ${FRONT_PORT}:${FRONT_PORT}
    environment:
      - API_PORT=${API_PORT}
      - PORT=${FRONT_PORT}
    restart: unless-stopped
    networks:
      - back
    volumes:
      - ./../requirements/front-end/app:/usr/front-end/app
    depends_on:
      - api
      - postgres
    command: ["npm", "run", "start"]

networks:
  back:
    driver: bridge
  db:
    driver: bridge

volumes: 
  postgres_volume:
  portainer-data:
