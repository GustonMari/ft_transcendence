// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Models

model Relation {
    id Int @id @unique @default(autoincrement())

    created_at DateTime @default(now())

    state RELATION_STATE 

    from User @relation("outgoing", fields: [from_id], references: [id])
    from_id Int

    to User @relation("incoming", fields: [to_id], references: [id])
    to_id Int

    @@map("friend_request")
}

model User {
    id         Int      @id @unique @default(autoincrement())
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
    login      String   @unique
    first_name String?
    last_name  String?
    avatar_url String?  @default("/storage/default/user.png")
    email      String   @unique
    state      Boolean  @default(false)
    password   String   @default(cuid())
    rt         String?
    description String? @db.VarChar(240)
    wins       Int      @default(0)
    loses      Int      @default(0)
    tfa        Boolean  @default(false)
    tfa_secret String?

    incoming Relation[]    @relation("incoming")
    outgoing Relation[]    @relation("outgoing")

    game_history1 GameHistory[] @relation("game_history1")
    game_history2 GameHistory[] @relation("game_history2")

    rooms UsersOnRooms[]
	messages Message[]
    socket_id  String?  @unique

    @@map("users")
}

model GameHistory {
    id Int @id @unique @default(autoincrement())

    created_at DateTime @default(now())

    user_1 User @relation("game_history1", fields: [user_1_id], references: [id])
    user_1_id Int
    user_1_score Int

    user_2 User @relation("game_history2", fields: [user_2_id], references: [id])
    user_2_id Int
    user_2_score Int

    @@map("game_history")
}

model Chat_Relation {
    id Int @id @unique @default(autoincrement())

    created_at DateTime @default(now())

    state RELATION_STATE 

    @@map("chat_request")
}

model Room {
    id         Int      @id @unique @default(autoincrement())
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
    name       String   @unique
    password   String   @default("")

    owner String
    owner_id Int
    users UsersOnRooms[]

	messages Message[]
    // @@map("rooms")
} 

model UsersOnRooms {

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    user User @relation(fields: [user_id], references: [id])
    user_id Int
    room Room @relation(fields: [room_id], references: [id])
    room_id Int


    admin Boolean @default(false)
    muted Boolean @default(false)
    banned Boolean @default(false)

	muted_at DateTime? 
	muted_till DateTime? 
	banned_at DateTime?
	banned_till DateTime?

    @@id([user_id, room_id])
}

model Message {

	id Int @id @unique @default(autoincrement())
	created_at DateTime @default(now())
	updated_at DateTime @updatedAt
	current_message       String
	sender_name String
	sender     User     @relation(fields: [sender_id], references: [id], onDelete: Cascade)
	sender_id  Int
	room       Room     @relation(fields: [room_id], references: [id], onDelete: Cascade)
	room_id    Int

	@@map("messages")
}

enum Role {
    ADMIN
    USER
}

enum RELATION_STATE {
    PENDING
    FRIEND
    BLOCKED
}
